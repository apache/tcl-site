<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN">

<html>
  <head>
    <title>Apache Tcl</title>
    <link rel="stylesheet" href="../style.css">
  </head>
  <body>
    <table width="100%" border="0">
	<tr>
	  <td align="center" valign="top">
	    <a href="http://tcl.apache.org/mod_dtcl/"><h1>mod_dtcl</h1></a>
	  </td>
	</tr>
    </table>

    <table width="75%" border="0">
	<tr>
	  <+ include navbar.html +>
	  
	  <td valign="top"> 
	    <h2>mod_dtcl Documentation</h2>

	    <h3>1) Installation</h3>
	    <ol>
	      <li><b>Check dependencies</b><br> 
		
		To install mod_dtcl, you will need <b>Tcl 8.2</b> or
		greater and <b>Apache 1.3.xx</b>.  It is known to run
		on Linux, FreeBSD, OpenBSD, and Solaris.  NT is also
		possible - please see the directions in the distribution.
	      </li>

	      <li><b>Get mod_dtcl</b><br> 

		If you are running a Debian or FreeBSD system, there
		are pre-built packages available at:
		<a href="http://www.debian.org/Packages/unstable/web/libapache-mod-dtcl.html">http://www.debian.org/Packages/unstable/web/libapache-mod-dtcl.html</a> 

		or
		
		<a href="http://www.freebsd.org/ports/www.html#mod_dtcl-0.8.1.1">http://www.freebsd.org/ports/www.html#mod_dtcl-0.8.1.1</a>.

		Otherwise, download the sources at FIXME.
	      </li>
	      <li><b>Uncompress the sources</b><br> 
		
		Sources should go in <code>src/modules/mod_dtcl/</code>, in your
		Apache source directory.
	      </li>

	      <li><b>Configure and Make</b><br> 

		Run <code>./configure
--add-module=src/modules/mod_dtcl/mod_dtcl.c</code> from the top level
of your Apache source distribution.  Then run make to build the new
Apache.  This results in a static httpd with mod_dtcl built in. It's
also possible to build mod_dtcl as a DSO (dynamic shared object) by
		editing <code>mod_dtcl.c</code> and the <code>Makefile</code> to point to the
		right directories, and simply running <code>make</code>.
	      </li>
	      <li><b>Configure Apache<br></b>		
		<ul>
		  <li>
		    <b>http.conf</b><br> <code>LoadModule dtcl_module
		      /usr/lib/apache/1.3/mod_dtcl.so</code><br> 
		    This points Apache to the shared object if
		      mod_dtcl is being used as a loadable module.
		  </li>
		  <li>
		    <b>srm.conf</b><br> 
		    <code>AddType application/x-httpd-tcl .ttml</code><br>
		    <code>AddType text/x-tcl .tcl</code>
		    (optional)<br>
		    These add the .ttml and .tcl (if desired) types to
		    Apache, so that they are processed by mod_dtcl.
		  </li>
		</ul>
	      </li>

	    </ol>


	    <h3>2) Apache Directives</h3>

	    <ul>
	      <li>
		<code><b>Dtcl_GlobalScript <i>script</i></code></b><br>
		Tcl script that is loaded when each interpreter is
		initialized.
	      </li>
	      
	      <li>
		<code><b>Dtcl_CacheSize <i>cachesize</i></b></code><br> 
		Number of ttml scripts to cache as Tcl Objects.
		Default is MaxRequestsPerChild / 2, or 50, if
		MaxRequestsPerChild is 0.
	      </li>

	      <li>
		<code><b>Dtcl_ChildInitScript <i>script</i></b></code><br>		
		Script to be called when each apache child is
		initialized. This is the best place to load modules.
	      </li>

	      <li>
		<code><b>Dtcl_ChildExitScript <i>script</i></b></code><br>	      
		Script to be called when each apache child exits.
	      </li>
	    </ul>

	    <h3>3) mod_dtcl specific Tcl commands</h3>

	    <ul>
	      <li>
		<code><b>buffer_add <i>string</i></b></code><br>	      
		Add text to output_buffer for later printing. Used
		internally.
	      </li>

	      <li>
		<code><b>hputs <i>?-error? text</i></b></code><br>	      
		The mod_dtcl version of "puts".  Outputs to the
		client, instead of to stdout.
		The error option permits you to send an 'error message' to the
		apache log file, at the NOTICE level.
	      </li>
	      <li>
		<code><b>hgetvars</b></code><br>
		Get environmental, CGI and Cookie variables. This is
		in a seperate command so as not to make the server do
		this every time you load a .ttml file. ENVS, VARS, and
		COOKIES are the associative arrays created.  ENVS
		contains environmental variables, VARS contains all
		the 'cgi' variables, and COOKIES, any cookies recieved
		from the client. 
	      </li>
	      <li>
		<code><b>include <i>filename</i></b></code><br>	      
		Include a file without parsing it.  This is the best
		way to include an HTML file or any other static content.
	      </li>
	      <li>
		<code><b>parse <i>filename</i></b></code><br>	      
		"Source" a .ttml file.  This is the way to include
		other .ttml files.
	      </li>
	      <li>
		<code><b>hflush</b></code><br>	      
		Flush the output buffers to the client.  Use this if
		you want to incrementally update a page.
	      </li>
	      <li>
		<code><b>headers redirect <i>uri</i></b></code><br>	      

		Redirect from the current page to a new
		URI. <b>Must</b> be done in the first block of TCL code.
	      </li>
	      <li>
		<code><b>headers setcookie <i>cookie-name
		cookie-value ?-expires date/time? ?-domain domain?
		?-path path? ?-secure?</i></b></code><br>

		This command is for setting cookies.  Cookie-name is
		the name of the cookie, cookie-value is the data
		associated with the variable.  Expires sets an
		expiration date for the cookie, and must be in the
		format 'DD-Mon-YY HH:MM:SS', path sets the path for
		which the cookie is valid, and secure specifies that
		the cookie is only to be transmitted if the connection
		is secure (HTTPS).
	      </li>
	      <li>
		<code><b>headers type
		<i>content-type</i></b></code><br>

		This command sets the "Content-type:" header returned
		by the script, which is useful if you wish to create a
		PNG (image), for example, with mod_dtcl.
	      </li>
	      <li>
		<code><b>headers set <i>headername value</i></b></code><br>

		Set arbitrary header names and values.
	      </li>

	      <li>
		<code><b>dtcl_info</b></code><br>	      

		Prints information on the internals of the module in
		HTML.  Currently, only the PID and size of the object
		cache are reported.
	      </li>
	    </ul>

	    <h3>4) Internals</h3>
	    <ul>
	      <li><b>Read the code!</b></li>
	      <li>		
		<b>Initialization</b><br>

		  When Apache is started, (or when child Apache
		  processes are started if a threaded Tcl is used),
		  <code>tcl_init_stuff</code> is called, which creates
		  a new interpreter, and initializes various things,
		  like the <code>apache_channel</code> channel system.
		  The caching system is also set up, and if there is a
		  GlobalScript, it is run.
	      </li>
	      <li><b>Achan/apache_channel</b><br>

		The "Apache Channel" system was created so that it is
		possible to have an actual Tcl channel that we could
		redirect standard output to.  This lets us use, for
		instance, the regular "puts" command in .ttml pages.
		It works by creating commands that write to memory
		that is slated to be sent to the client.
	      </li>

	      <li><b>Page parsing/execution</b><br>

		In <code>send_parsed_file</code> Each .ttml file is
		loaded and run within its own namespace.  No new
		interpreter is created for each page.  This lets you
		share variables, and most importantly, loaded modules,
		from a common parent (such as one of the InitScripts).
		When a file is loaded, it is transformed into a Tcl
		script by putting everything outside of &lt;+ and
		+&gt; into large hputs statements.  When the script is
		complete, it is then inserted into the cache, for
		future use.  In fact, if the file modification
		information doesn't change, mod_dtcl will execute the
		cached version of the script the next time it is
		encountered.
	      </li>
	      <li><b>Binary data</b><br>
		mod_dtcl is capable of outputing binary data, such as
		images, or loading binary data with 'include'.
	      </li>
	    </ul>


	    <p align="center">
	      <a href="http://www.apache.org/"><img src="../apache_pb.gif"
						  alt="Powered by Apache" border="0"
						  width="259"
						  height="32"></a>
	    </p>
	    
	  </td>
	</tr>
    </table>
  </body>
</html>
