## $Id$

startHtmlPage
startHtmlBody
putHeader 3

web::putx {
    <table border="0" cellpadding="0" cellspacing="0" width="770">
    {headRow 4 "frequently asked questions"}
    <tr valign="top">
    {navbar_supp 1}
    <td width="455">
<a name=" generic"><a href="#toc"><h1>1 Generic Questions</h1></a>

<a name=" whatis"><a href="#toc"><h2>1.1 What is Websh ?</h2></a>

Websh is a rapid development environment for building powerful and
reliable web applications. It is a standard Tcl extension and is
released as Open Source Software. Websh is versatile and handles
everything from HTML generation to data-base driven one-to-one page
customization. Netcetera AG, has been using it for years for virtually
all their customer projects, which typically are E-commerce shops or
electronic banking applications.

<a name=" version"><a href="#toc"><h2>1.2 What is the current version ?</h2></a>

Currently, we are finalizing version 3 of Websh. The beta-2
release of Websh is available for download.

<a name=" price"><a href="#toc"><h2>1.3 What does Websh cost ?</h2></a>

Nothing. It's free. Websh is released as Open Source.

<a name=" download"><a href="#toc"><h2>1.4 Where can I download Websh ?</h2></a>

The beta-2 release of Websh is available for download at the
<a href="download.ws3">download area</a> of this site.

<a name=" why"><a href="#toc"><h2>1.5 Why should I use Websh ?</h2></a>

In today's E-commerce environment, flexibility and short
time-to-market are key characteristics for successful
business. E-commerce, in other words, calls for a solid basis on which
applications can be built. For exactly this purpose we have designed
Websh.

<br><br>
Websh helps you to create high-quality web applications with light
time constraints. It is fast, versatile, scalable, and easy to learn.
With Websh, you have a win-win situation for developers and
customers.

<a name=" mailinglist"><a href="#toc"><h2>1.6 Is there a mailing list ?</h2></a>

<br><br>
<br><br>
<a name=" technical"><a href="#toc"><h1>2 Technical Questions</h1></a>

<a name=" logging"><a href="#toc"><h2>2.1 How do I use the logging facility ?</h2></a>

Before Websh sends a message to a log destination, the message
needs to pass two filters. That's why you need to specify a level when
you issue a log message. First, Websh decides whether or not to
handle the log message. Then, it scrolls through the list of
registered log destinations and compares the log message level against
the filter of each log destination. The message is sent to the log
destination only if the message passes the second filter.

<br><br>
A log level consists of a tag and a level, separated by a dot.
Possible levels are
<ul>
<li>alert</li>
<li>error</li>
<li>warning</li>
<li>info</li>
<li>debug</li>
</ul>
The tag is free text. Typically, it is the name of the application, 
say &quot;foo&quot;.

<br><br>
Before log messages can reach their destination, you have to
&quot;open up&quot; the log destination, in two steps:
<pre>

web::logfilter add foo.warning-debug
web::logdest add foo.warning-info file foo_warn.log
web::logdest add foo.debug file foo_dbg.log

</pre>

This sequence of commands tells Websh to handle all messages
in the range &quot;warning&quot; to &quot;debug&quot;, if the level string is
&quot;foo&quot;, and to discard any other messages. Messages of level
&quot;debug&quot; are then written to file &quot;foo_dbg.log&quot;, while
the other messages end up in file &quot;foo_warn.log&quot;.

<br><br>
Issuing a message is easy:
<pre>

web::log foo.info &quot;Hello, world !&quot;

</pre>
    </td>
  </tr>
  </table>
}

finishPage 3
