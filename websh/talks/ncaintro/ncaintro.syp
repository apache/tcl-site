%%%TITLE websh3

%%%AUTHOR Simon Hefti

%%%date / company

%%%HTML <h1><center>mod_websh: a Tcl-Based Apache Module for Rapid Application Development</center></h1>
%%%HTML <br>
%%%HTML <br>
%%%HTML <h2><center>NCA-163-0</center></h2>
%%%HTML <br>
%%%HTML <br>
%%%HTML <h2><center>Simon Hefti</center></h2>
%%%HTML <h2><center>Andrej Vckovski</center></h2>
%%%HTML <h2><center>Ronnie Brunner</center></h2>
%%%HTML <br>
%%%HTML <br>
%%%HTML <br>
%%%HTML <h2><center>Netcetera AG, Zurich Switzerland</center></h2>
%%%HTML <br>
%%%HTML <h2><center>The Netcetera University, 7-Dec-2000, Zurich</center></h2>

%%%%TOC

== Agenda ==

%%%%TOC

%%%HTML <h2>1) what is webshell ?</h2>
%%%HTML <h2>2) webshell tutorial</h2>
%%%HTML <h2>3) mod_websh</h2>
%%%HTML <h2>4) porting to websh3</h2>
%%%HTML <h2>4) status</h2>
%%%HTML <h2>5) summary</h2>

== what is webshell ? ==

%%%HTML <center><b>web application development framework<br>
%%%HTML reduced to the max</b></center>


==Figure==ws3ov==ws3ov.gif
    System Design

=|webshell provides|=\\

a set of commands and data structures for quick and reliable web
application development and deployment


%%%SPLIT

-- webshell is --

==D mod_websh
    a dynamically loadable Apache module

==D websh3
    a Tcl interpreter

==D libwebsh.so
    a loadable Tcl extension

==D open source software

%%%HTML <a href="http://websh.com" target="new">http://websh.com</a>

==D quick reference

%%%HTML <a href="http://websh.com/quickref.html" target="new">http://websh.com/quickref.html</a>

%%%SPLIT 
-- CGI versus embedded execution --

%%%----------------------------------------------------------------------------
==T pros                       | cons
%%%----------------------------------------------------------------------------
    industry standard          | child processes are expensive
    simple, easy to debug      | re-initialization of application context
    robust                     | need pool managers for bottlenecks (DB)
    might be used stand-alone  |     
%%%----------------------------------------------------------------------------

%%%SPLIT

-- templates versus constructive rendering --

%%%----------------------------------------------------------------------------
==T pros                                          | cons
%%%----------------------------------------------------------------------------
    straight-forward                              | error handling in forms complicated
    simple layout design                          | app logic and layout tightly coupled
    application programming is content management | housekeeping in yet another language
                                                  | no multi-type response (images, PDF, classes)
%%%----------------------------------------------------------------------------

==Figure==transactions==transactions.gif
    HTTP and Buisness transactions

%%%SPLIT

-- the answer: webshell --

%%%HTML <center><b>webshell for everything</b></center>

==D development in CGI
    use the advantages of CGI (robust, portable, stateless) for
    web application development

==D deployment with mod_websh
    use the advantages of embedded execution (performance)
    with mod_websh

==D operation/housekeeping with websh3
    use your through know-how of the development language
    also to ensure operations and housekeeping

==D templates with mod_websh
    complex applications: don't ASP or JSP !\\
    ... but use mod_websh for dynamic HTML pages

== why a new version ? ==

==D flexibility
    websh3 is standard Tcl extension and can be used
    as any extension and in combination with other Tcl extensions

==D portability
    back-port to C for easier porting

==D mod_websh
    Apache module for fast web applications

== selected features ==

==D sessions
    storage independent session handling
    ==* group HTTP transactions into business transactions
    ==* session tracking
    ==* data attached to session

==D command dispatching
    easy definition of control flow
    ==* URL generation including state, time stamps, and session tracking,
        encrypted by default
    ==* automatic dispatching into various states within an application
        (single binary) - jump from one page to the next within your 
        application

==D encryption
    encrypt credit card numbers, URLs, sessions\\
    ==* built-in medium encryption
    ==* extensible on the Tcl level

==D logging
    your app is live 24 hr a day, year in, year out:\\
    you =/will/= need logging
    ==* built-in: files, channels, syslog, commands
    ==* extend using the "command" feature
    ==* clean C API additional log handlers

%%%SPLIT

-- more features --

==D buffered output
    have as many output channels as you want

==D memory channels
    read from and/or write to variables

==D control over output
    set HTTP headers and error code, use encoding

==D versatile, transparent URL and form parameters
    ==* URL (=\web::param\=) and form variables (=\web::formvar\=) separated
    ==* handle multiple parameters with the same name

==D multi-part formdata
    transparent parsing of urlencoded and multipart/formdata form data

==D request handler abstraction
    commands are independent of underlying request handler - same accessor
    to CGI vars in CGI case and in mod_websh

==D encoding
    conversion from and to HTML code, uricoding

==D message protocol
    send and receive data in platform-independent format


== webshell tutorial ==

-- hello, world --

%%%INC helloworld.html

%%%HTML <a href="/helloworld.ws3" onclick="javascript:window.open('','example','width=800,height=400,directories=no,location=no,menubar=no,scrollbars=yes,status=no,toolbar=no,resizable=yes');" target="example")>demo</a>

%%%SPLIT

-- command dispatching --

%%%INC dispatch.html

%%%HTML <a href="/dispatch.ws3" onclick="javascript:window.open('','example','width=800,height=400,directories=no,location=no,menubar=no,scrollbars=yes,status=no,toolbar=no,resizable=yes');" target="example")>demo</a>

%%%SPLIT

-- URL parameters and form variables (1) --

-- web::param --

==D syntax
    =|web::param|= ?options? ?<key>? ?<value> ...?\\
    Options are: =\-count\=, =\-set\=, =\-lappend\=, =\-names\=, and =\-unset\=

web::param is an accessor to state information from the querystring. 
Suppose the querystring is "lang=EN".  After web::dispatch has parsed the
querystring, =\web::param lang\= will report =\EN\=.  Additionally,
web::param can manage this data and add, append, and delete parameters as
needed. 

==D web::param
    returns a list of all known keys
==D web::param <key> ?<default>?
    returns the value for <key>. Can be a list. In case
    that <key> does not exist, return <default>, if it is
    given, or an empty string.
==D web::param -count <key>
    returns number of items in list of <key>
==D web::param -set <key>
    does the same as 'web::param <key>'
==D web::param -set <key> <value> ?<value> ...?
    add the parameter <key> to the web::param data.
    Any existing parameters with <key> are overwritten
==D web::param -lappend <key> <value> ?<value> ...?
    append parameters with the same <key> to the web::param data.  In
    this case the existing <value> is not overwritten
==D web::param -unset
    deletes all parameters from the web::param data
==D web::param -unset <key>
    delete a parameter from the web::param data

Same (base) syntax used by:
==* web::param
==* web::formvar
==* web::cmdurlcfg
==* web::request
==* web::response

%%%SPLIT

-- URL parameters and form variables (2) --

%%%INC form.html

%%%HTML <a href="/form.ws3" onclick="javascript:window.open('','example','width=800,height=400,directories=no,location=no,menubar=no,scrollbars=yes,status=no,toolbar=no,resizable=yes');" target="example")>demo</a>

%%%SPLIT

-- sessions (1) --

==Figure==idflow==idflow.gif
    Session Id

-- state::init --

==* is id given ?
    ==* yes: load directly
    ==* no: is -attachto given ?
        ==* yes: is id in web::param ?
            ==* yes: load
            ==* no: is idgen given ?
                ==* yes: create new id and store as static param
                ==* no: error
        ==* no: error

By the way: manage static parameters using =\web::cmdurlcfg\=

%%%SPLIT

-- sessions (2) --

%%%INC cookie.html

%%%HTML <a href="/cookie.ws3" onclick="javascript:window.open('','example','width=800,height=400,directories=no,location=no,menubar=no,scrollbars=yes,status=no,toolbar=no,resizable=yes');" target="example")>demo</a>

%%%SPLIT

-- sessions (3) --

%%%INC filecontext.html

%%%HTML <a href="/filecontext.ws3" onclick="javascript:window.open('','example','width=800,height=400,directories=no,location=no,menubar=no,scrollbars=yes,status=no,toolbar=no,resizable=yes');" target="example")>demo</a>

%%%SPLIT

-- logging (1) --

==Figure==weblog==weblog.gif
    logging
==Figure==filters==filters.gif
    log filters
%%%SPLIT

-- logging (2) --

%%%INC logging.html

%%%HTML <a href="/logging.ws3" onclick="javascript:window.open('','example','width=800,height=400,directories=no,location=no,menubar=no,scrollbars=yes,status=no,toolbar=no,resizable=yes');" target="example")>demo</a>

%%%SPLIT

-- logging (3) --

%%%INC logging2.html

%%%HTML <a href="/logging2.ws3" onclick="javascript:window.open('','example','width=800,height=400,directories=no,location=no,menubar=no,scrollbars=yes,status=no,toolbar=no,resizable=yes');" target="example")>demo</a>

%%%SPLIT

-- encryption --

==D chains of procedures
    define a list of procedures which should be tried to encrypt or decrypt
    a string\\
    first match is used

==D default settings
    ==* encryption method "D"
    ==* decryption: tries "plain text querystring" first, then method "D"

==D encryption method "D"
    ==* configurable key
    ==* check-sum protected (CRC-16)

%%%INC encrypt.html

%%%HTML <a href="/encrypt.ws3" onclick="javascript:window.open('','example','width=800,height=400,directories=no,location=no,menubar=no,scrollbars=yes,status=no,toolbar=no,resizable=yes');" target="example")>demo</a>


== mod_websh ==

-- philosophy --

==D reuse interpreters
    do not send time spawning a child or re-loading application logic

==D webshell script for everything
    deploy =/the same/= webshell in CGI and mod_websh environments

==D template mode
    if you must

==D Tcl is thread-safe - ideal for Apache 2.0


%%%SPLIT

-- architecture --

==Figure==classes==classes.gif
    Object Model
%%%SPLIT
==Figure==lifetime==lifetime.gif
    Life Time of Interpreters

%%%SPLIT
-- set-up --

=|httpd.conf|=\\
--- 
LoadModule websh_module /path/to/mod_websh.so
WebshConfig /path/to/config_file.tcl

AddHandler websh .ws3
AddHandler websh .wsp
--- 

=|/path/to/config_file.tcl|=\\
%%%INC config_file.html

=|/path/to/my/wsphandler|=\\
%%%INC wsphandler.html

%%%SPLIT
-- embedded execution --

%%%INC embed.html
%%%HTML <a href="http://latin:2081/embed.ws3" onclick="javascript:window.open('','example','width=800,height=400,directories=no,location=no,menubar=no,scrollbars=yes,status=no,toolbar=no,resizable=yes');" target="example")>demo (one httpd)</a>
%%%HTML <a href="http://latin:2080/embed.ws3" onclick="javascript:window.open('','example','width=800,height=400,directories=no,location=no,menubar=no,scrollbars=yes,status=no,toolbar=no,resizable=yes');" target="example")>demo</a>

%%%SPLIT
-- template mode --

%%%INC wsp.html
%%%HTML <a href="/wsp.wsp" onclick="javascript:window.open('','example','width=800,height=400,directories=no,location=no,menubar=no,scrollbars=yes,status=no,toolbar=no,resizable=yes');" target="example")>demo</a>

== websh2 -> websh3 ==

==D wpp_ -> web::
    replacing wpp_ with web:: covers 90 % of the porting
    Special:\\
    ==* wpp_puts -> web::put
    ==* wpp_eval -> web::putx

==D web::dispatch
    dispatching is no longer hidden and automatically done.
    You need to call web::dispatch - typically the last command
    in the web app.

==D log commands
    wpp_loglevel -> web::logfilter add
    wpp_logrule  -> web::logdest add

==D HTTP headers
    ==* do =|not|= use =\$env\= any longer - will not work with mod_websh.
        Use =\web::request\= instead.
    ==* do not =\put\= HTTP header fields. Use =\web::response\= instead.

%%%SPLIT
-- mod_websh --

==D web:initializer
    put code here which will be evaluated just once, when
    the interpreter is created\\
    Typically, this is your application bare of =\web::dispatch\=

==D web::finalizer
    this code will be evaluated just before the interpreter will
    be destroyed. No response to client possible here (too late).\\
    Typically, close DB handles.

==D web::maineval
    execute code in the controlling interpreter\\
    Typically, overwrite mapper.


%%%SPLIT
-- command list --

%%%----------------------------------------------------------------------------
==T websh2                  | websh3                      | description
%%%----------------------------------------------------------------------------
    wpp_args                | n/a                         |
    wpp_cmdurl              | web::cmdurl                 | href for dispatch
    n/a                     | web::cmdurlcfg              | format of cmdurl
    wpp_command             | web::command                | def a command
    wpp_config              | web::config                 | websh3 settings
    n/a                     | web::context                | cset, cget, ...
    n/a                     | web::cookiecontext          | data persistence
    n/a                     | web::cryptdkey              | encryption D key
    wpp_decrypt             | web::decrypt                | 
    n/a                     | web::decryptd               | encryption D
    =/see wpp_unhtmlify/=   | web::dehtmlify              | remove HTML tags
    n/a                     | web::dispatch               | 
    wpp_encrypt             | web::encrypt                |
    wpp_eval                | =/see web::putx/=           |
    wpp_evalfile            | =/see web::putxfile/=       |
    wpp_for                 |                             |
    wpp_foreach             |                             |
    n/a                     | web::encryptd               | encryption D
    n/a                     | web::filecontext            | data persistence
    n/a (in wpp_state)      | web::filecounter            | seq nr generator
    n/a                     | web::finalize               | mod_websh compat.
    n/a (mod_websh)         | web::finalizer              | 
    wpp_formvar             | web::formvar                | access form data
    wpp_getcommand          | web::getcommand             | 
    wpp_htmlify             | web::htmlify                | 
    wpp_if                  | n/a                         |
    wpp_include             | web::include                | source/load lib
    wpp_info                | n/a                         |
    wpp_ischecked           | =/see web::match/=          |
    wpp_isselected          | =/see web::match/=          |
    n/a (mod_websh)         | web::initializer            | 
    n/a (mod_websh)         | web::interpcfg              | config of "this"
    n/a (mod_websh)         | web::interpclasscfg         | config of class
                            | (web::list2uri)             |
    n/a                     | web::lockfile               | lock a file
    wpp_log                 | web::log                    |
    wpp_logfile             | =/see web::logdest/=        |
    wpp_loglevel            | =/see web::logfilter/=      |
    wpp_logrule             | =/see web::logdest/=        |
    =/see wpp_logrule/=     | web::logdest                | destination
    =/see wpp_loglevel/=    | web::logfilter              | filter
    n/a (mod_websh)         | web::maineval               | eval in controller
    =/see web::isselected/= | web::match                  | 
    wpp_msgflag             | web::msgflag                | translate flag
    wpp_output              | =/see web::response/=       |
    wpp_param               | web::param                  | access querystring
    wpp_puts                | =/see web::put/=            |
    =/see wpp_puts/=        | web::put                    | write
    =/see wpp_eval/=        | web::putx                   | write and eval
    =/see wpp_evalfile/=    | web::putxfile               | read and putx file
    wpp_readfile            | web::readfile               | 
    wpp_recv                | web::recv                   | 
    (env(foo))              | web::request                | manage request data
    =/see wpp_output/=      | web::response               | manage response
    wpp_send                | web::send                   | 
    wpp_state               | =/see web::xcontext/=       |
    wpp_stateid             | =/see web::xcontext/=       |
    wpp_statesave           | =/see web::xcontext/=       |
                            | (web::sessioncontextfactory)| 
    wpp_tempfile            | web::tempfile               | return unique name
    wpp_unhtmlify           | =/see web::dehtmlify/=      |
    n/a                     | web::truncatefile           | truncate open file
    n/a                     | web::unlockfile             | unlock file
                            | (web::uri2list)             |
    wpp_uridecode           | web::uridecode              |
    wpp_uriencode           | web::uriencode              |
    wpp_while               | n/a                         |
%%%----------------------------------------------------------------------------

== setting up a project ==

--- 
                                 foo/
    +-----------+-----------------+-----------------------+
    bin/        etc/              lib/                    log/
      websh3*     foo.conf        +- libtcl8.3.so*          foo.log
      wrapper*    foo.conf.dist   +- tcl8.3/
                                     +- init.tcl
                                     +- encoding/
                                        +- iso8859-1.enc
--- 

==D libtcl8.3.so
    all Tcl 8.3.x versions are API compatible - thus you can use a
    libtcl8.3.so file from any of the Tcl 8.3 releases. 8.3.2 is
    preferred.
==D encoding files
    ==* if omitted: problems with umlauts
    ==* add as many as you need (Japanese ?)

== websh3 libraries ==

%%%----------------------------------------------------------------------------
==T lib                              | description                                                       | ws3 ready | stable
%%%----------------------------------------------------------------------------
    nca-109-5/parser/parser.tcl      | "AND/OR/NOT" expressions                                          |   |
    nca-109-5/util/base64.tcl        | conversion to and from base64 encoded strings, implemented in Tcl | y | y
    nca-109-5/util/config.tcl        | add cset/cget etc functionality                                   | y | y
    nca-109-5/util/context.tcl       | provide command web::context for non-websh3 environment           | y | y
    nca-109-5/util/csv.tcl           | conversion to and from M$-Excel's .csv format and Tcl lists       | y | y
    nca-109-5/util/text.wsh          |                                                                   | y | y
    nca-109-5/util/version.tcl       |                                                                   |   |
    nca-109-5/util/watchdox.ws3      | watchdog                                                          | y | n
    nca-109-5/util/websh2.ws3        | websh2 compatibility layer for websh3                             | y | n
    nca-109-5/webdb/wdb.tcl          | web db driver for websh3                                          | y | ?
    nca-109-5/webdb/db3/driver.tcl   | driver for berkly db                                              | y | ?
    nca-109-5/webdb/mysql/driver.tcl | driver for mySQL                                                  | y | ?
    nca-109-5/plugin/berkctx.ws3     | berkly db - based context manager for websh3                      | y | ?
    nca-024-8/weblib/config.wsh      | =|depreciated|=                                                   |   |
    nca-024-8/weblib/connect.wsh     | round robin connetion e.g for multiple wesams                     | n | y
    nca-024-8/weblib/set.wsh         |                                                                   |   |
    nca-024-8/weblib/soundex.wsh     | similar "sounding" words -> expression                            | n | y
    nca-024-8/weblib/wesix.wsh       | the "webshell search indexer"                                     | n | y
    nca-063-3/src/other/ftp_lib.tcl  | access to ftp                                                     |   |
    itcl                             |                                                                   |   |
    SSLtcl                           |                                                                   |   |
    pdflib                           |                                                                   |   |
    tclexpat                         |                                                                   |   |
    tclblend                         |                                                                   |   |
                                     | chartago/graphserver access/support                               |   |
                                     | exectimeout                                                       |   |
                                     | sendmail (sending e-mails from tcl)                               |   |
                                     | form-field validation (e-mails, integers, dates ...)              |   |
%%%----------------------------------------------------------------------------

== FAQ ==

==D locking
    ==* websh3 comes with operating-system based file locking
    ==* these are advisory locks
    ==* web::filecounter and web::filecontext are always locked
    ==* no "filelock.tcl" alike functionality built-in

==D is it a bug ?
    ==* InfoPlaza is websh3-based
    ==* webis is
    ==* netcetera.ch is
    ==* DVD library (and friends) are
    ==* websh3 is pretty stable - beta releases are in productive use since end April
    ==* but still: =(mailto:simon.hefti@netcetera.ch)=

==D how am I informed about websh3 ?
    mail to staff

==D documentation ?
    ==* =(http://websh.com/quickref.html)=
    ==* =(http://websh.com/examples.html)=

==D open source
    check out nca-073-9 and fix it



== status ==

==D beta-3
    ==* final API (use this version)
    ==* mod_websh for Apache 1.3 final

==D beta-4 issues
    ==* search for memory leaks
    ==* finalize encoding on memory channel
    ==* mod_websh for Apache 2.0
    ==* I expect it end December 2000

== summary ==

%%%HTML <center><b>web application development framework<br>
%%%HTML reduced to the max</b></center>

-- webshell is cool because --

==D it covers all aspects of web applications
    CGI, mod_websh, templates

==D it has unique concepts
    command dispatching\\
    multiple output buffers\\
    paradigm of one language for all

==D Tcl and webshell are thread safe
    therefore, webshell is ready for Apache 2.0

==D it is Open Source Software
    you have the code
